<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>algorithm on</title><link>https://hayul7805.github.io/quartz/tags/algorithm/</link><description>Recent content in algorithm on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 20 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://hayul7805.github.io/quartz/tags/algorithm/index.xml" rel="self" type="application/rss+xml"/><item><title>이진탐색</title><link>https://hayul7805.github.io/quartz/notes/%E1%84%8B%E1%85%B5%E1%84%8C%E1%85%B5%E1%86%AB%E1%84%90%E1%85%A1%E1%86%B7%E1%84%89%E1%85%A2%E1%86%A8/</link><pubDate>Sun, 20 Nov 2022 00:00:00 +0000</pubDate><guid>https://hayul7805.github.io/quartz/notes/%E1%84%8B%E1%85%B5%E1%84%8C%E1%85%B5%E1%86%AB%E1%84%90%E1%85%A1%E1%86%B7%E1%84%89%E1%85%A2%E1%86%A8/</guid><description>[!note] Note
이진탐색은 정렬되어 있는 리스트에서 탐색 범위를 절반씩 좁혀가며 데이터를 탐색하는 방법이다. 이때, log N의 시간복잡도를 가진다. 시작점, 끝점, 중간점을 이용해서 탐색 범위를 설정한다.</description></item><item><title>이진탐색</title><link>https://hayul7805.github.io/quartz/notes/%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89/</link><pubDate>Sun, 20 Nov 2022 00:00:00 +0000</pubDate><guid>https://hayul7805.github.io/quartz/notes/%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89/</guid><description>[!note] Note
이진탐색은 정렬되어 있는 리스트에서 탐색 범위를 절반씩 좁혀가며 데이터를 탐색하는 방법이다. 이때, log N의 시간복잡도를 가진다. 시작점, 끝점, 중간점을 이용해서 탐색 범위를 설정한다.</description></item><item><title>DFS, BFS</title><link>https://hayul7805.github.io/quartz/notes/DFS-BFS/</link><pubDate>Thu, 17 Nov 2022 00:00:00 +0000</pubDate><guid>https://hayul7805.github.io/quartz/notes/DFS-BFS/</guid><description>[!note] Note
DFS와 BFS는 대표적인 그래프 탐색 알고리즘이다.
깊이 우선 탐색(DFS) DFS는 그래프에서 깊은 부분을 우선적으로 탐색하는 알고리즘이다.</description></item><item><title>⚙️ Dynamic Programming</title><link>https://hayul7805.github.io/quartz/notes/Dynamic-Programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hayul7805.github.io/quartz/notes/Dynamic-Programming/</guid><description>이번 포스팅에서는 &amp;ldquo;한 번 계산한 문제는 다시 계산하지 않도록 한다!&amp;quot; 는 **다이나믹 프로그래밍(Dynamic Programming, 동적 계획법이라고도 함)**에 대해서 소개해보고 이를 Python으로 구현하는 방법에 대해 알아보자.</description></item><item><title>⚙️ Two Pointers</title><link>https://hayul7805.github.io/quartz/notes/Two-Pointers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hayul7805.github.io/quartz/notes/Two-Pointers/</guid><description>투포인터 알고리즘(Two Pointers Algorithm) 또는 슬라이딩 윈도우(Sliding Window) 라고 부른다.
알고리즘 문제를 풀다 완전탐색으로 해결하면 시간 초과가 나는 문제가 종종 있는데, 이때 사용하면 빠르게 해결할 수 있다.</description></item></channel></rss>