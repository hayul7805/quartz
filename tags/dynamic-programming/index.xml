<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dynamic-programming on</title><link>https://hayul7805.github.io/quartz/tags/dynamic-programming/</link><description>Recent content in dynamic-programming on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 08 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://hayul7805.github.io/quartz/tags/dynamic-programming/index.xml" rel="self" type="application/rss+xml"/><item><title>정수 삼각형</title><link>https://hayul7805.github.io/quartz/notes/%E1%84%8C%E1%85%A5%E1%86%BC%E1%84%89%E1%85%AE-%E1%84%89%E1%85%A1%E1%86%B7%E1%84%80%E1%85%A1%E1%86%A8%E1%84%92%E1%85%A7%E1%86%BC/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://hayul7805.github.io/quartz/notes/%E1%84%8C%E1%85%A5%E1%86%BC%E1%84%89%E1%85%AE-%E1%84%89%E1%85%A1%E1%86%B7%E1%84%80%E1%85%A1%E1%86%A8%E1%84%92%E1%85%A7%E1%86%BC/</guid><description>위와 같은 삼각형의 꼭대기에서 바닥까지 이어지는 경로 중, 거쳐간 숫자의 합이 가장 큰 경우를 찾아보려고 합니다. 아래 칸으로 이동할 때는 대각선 방향으로 한 칸 오른쪽 또는 왼쪽으로만 이동 가능합니다.</description></item><item><title>정수 삼각형</title><link>https://hayul7805.github.io/quartz/notes/%EC%A0%95%EC%88%98-%EC%82%BC%EA%B0%81%ED%98%95/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://hayul7805.github.io/quartz/notes/%EC%A0%95%EC%88%98-%EC%82%BC%EA%B0%81%ED%98%95/</guid><description>위와 같은 삼각형의 꼭대기에서 바닥까지 이어지는 경로 중, 거쳐간 숫자의 합이 가장 큰 경우를 찾아보려고 합니다. 아래 칸으로 이동할 때는 대각선 방향으로 한 칸 오른쪽 또는 왼쪽으로만 이동 가능합니다.</description></item><item><title>⚙️ Dynamic Programming</title><link>https://hayul7805.github.io/quartz/notes/Dynamic-Programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hayul7805.github.io/quartz/notes/Dynamic-Programming/</guid><description>이번 포스팅에서는 &amp;ldquo;한 번 계산한 문제는 다시 계산하지 않도록 한다!&amp;quot; 는 **다이나믹 프로그래밍(Dynamic Programming, 동적 계획법이라고도 함)**에 대해서 소개해보고 이를 Python으로 구현하는 방법에 대해 알아보자.</description></item><item><title>멀리뛰기</title><link>https://hayul7805.github.io/quartz/notes/%E1%84%86%E1%85%A5%E1%86%AF%E1%84%85%E1%85%B5%E1%84%84%E1%85%B1%E1%84%80%E1%85%B5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hayul7805.github.io/quartz/notes/%E1%84%86%E1%85%A5%E1%86%AF%E1%84%85%E1%85%B5%E1%84%84%E1%85%B1%E1%84%80%E1%85%B5/</guid><description>효진이는 멀리 뛰기를 연습하고 있습니다. 효진이는 한번에 1칸, 또는 2칸을 뛸 수 있습니다. 칸이 총 4개 있을 때, 효진이는
1 2 3 4 5 (1칸, 1칸, 1칸, 1칸) (1칸, 2칸, 1칸) (1칸, 1칸, 2칸) (2칸, 1칸, 1칸) (2칸, 2칸) 의 5가지 방법으로 맨 끝 칸에 도달할 수 있습니다.</description></item><item><title>멀리뛰기</title><link>https://hayul7805.github.io/quartz/notes/%EB%A9%80%EB%A6%AC%EB%9B%B0%EA%B8%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hayul7805.github.io/quartz/notes/%EB%A9%80%EB%A6%AC%EB%9B%B0%EA%B8%B0/</guid><description>효진이는 멀리 뛰기를 연습하고 있습니다. 효진이는 한번에 1칸, 또는 2칸을 뛸 수 있습니다. 칸이 총 4개 있을 때, 효진이는
1 2 3 4 5 (1칸, 1칸, 1칸, 1칸) (1칸, 2칸, 1칸) (1칸, 1칸, 2칸) (2칸, 1칸, 1칸) (2칸, 2칸) 의 5가지 방법으로 맨 끝 칸에 도달할 수 있습니다.</description></item></channel></rss>