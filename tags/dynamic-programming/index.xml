<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dynamic-programming on</title><link>https://hayul7805.github.io/quartz/tags/dynamic-programming/</link><description>Recent content in dynamic-programming on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://hayul7805.github.io/quartz/tags/dynamic-programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Algorithm - Dynamic Programming</title><link>https://hayul7805.github.io/quartz/notes/Dynamic-Programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hayul7805.github.io/quartz/notes/Dynamic-Programming/</guid><description>이번 포스팅에서는 &amp;ldquo;한 번 계산한 문제는 다시 계산하지 않도록 한다!&amp;quot; 는 **다이나믹 프로그래밍(Dynamic Programming, 동적 계획법이라고도 함)**에 대해서 소개해보고 이를 Python으로 구현하는 방법에 대해 알아보자.</description></item><item><title>멀리뛰기</title><link>https://hayul7805.github.io/quartz/notes/%EB%A9%80%EB%A6%AC%EB%9B%B0%EA%B8%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hayul7805.github.io/quartz/notes/%EB%A9%80%EB%A6%AC%EB%9B%B0%EA%B8%B0/</guid><description>문제 설명 효진이는 멀리 뛰기를 연습하고 있습니다. 효진이는 한번에 1칸, 또는 2칸을 뛸 수 있습니다. 칸이 총 4개 있을 때, 효진이는</description></item></channel></rss>